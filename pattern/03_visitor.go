package pattern

import "fmt"

type visitor interface {
	visitForDog(*dog)
	visitForCat(*cat)
}

type voice struct {
}

func (v *voice) visitForCat() {
	fmt.Println("meow!")
}

func (v *voice) visitForDog() {
	fmt.Println("woof!")
}

type dog struct {
}

func (d *dog) accept(v visitor) {
	v.visitForDog(d)
}

type cat struct {
}

func (c *cat) accept(v visitor) {
	v.visitForCat(c)
}

/*
Применимость

вместо того, чтобы объявлять поведение внутри класса,
мы делегируем это поведение некоторому внешнему объекту.
При этом объект-делегат называется посетителем (Visitor),
и в нем должны быть объявлены методы посещения для каждого конкретного типа из иерархии.

Плюсы и минусы

Упрощает добавление операций, работающих со сложными структурами объектов.
Объединяет родственные операции в одном классе.

Паттерн не оправдан, если иерархия элементов часто меняется.
Может привести к нарушению инкапсуляции элементов.

В данном примере с помощью посетителя мы выделяем такое поведение кошек и собак, как лай и мяуканье (голос).
*/
